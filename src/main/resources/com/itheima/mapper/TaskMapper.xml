<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.itheima.mapper.TaskMapper">


    <insert id="createTask">
        <selectKey keyProperty="id" resultType="int" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into
        student_collaborative_task_system.task(topic,class_id,create_time,update_time,procedure_order_list,end_time,start_time)
        values(#{topic},#{classID},#{createTime},#{updateTime},#{procedureOrderList},#{endTime},#{startTime})
    </insert>

    <insert id="createChatroom">
        <selectKey keyProperty="id" resultType="int" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into student_collaborative_task_system.chatroom(create_time,update_time)
        values(#{createTime},#{updateTime})
    </insert>

    <insert id="createCollaborativeProcedure">
        <selectKey keyProperty="id" resultType="int" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into student_collaborative_task_system.procedure_collaborative(update_time, create_time) values
        (#{updateTime}, #{createTime})
    </insert>

    <insert id="createProcedureCategory">
        insert into student_collaborative_task_system.procedure_category(task_id, procedure_order, procedure_type,
                                                                         group_id, update_time, create_time,
                                                                         procedure_id)
        values (#{taskID}, #{procedureOrderInTask}, #{procedureType}, #{groupID}, #{updateTime}, #{createTime},
                #{collaborativeProcedureID})
    </insert>
    <insert id="createMindStormProcedure">
        <selectKey keyProperty="id" resultType="int" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into student_collaborative_task_system.procedure_mindstorm(update_time, create_time)
        values (#{updateTime}, #{createTime})
    </insert>
    <insert id="createQuiz">
        <selectKey keyProperty="id" resultType="int" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into student_collaborative_task_system.quiz(update_time,create_time,task_id)
        values (#{updateTime}, #{createTime}, #{taskID})
    </insert>
    <insert id="createReflectionProcedure">
        <selectKey keyProperty="id" resultType="int" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into student_collaborative_task_system.procedure_reflection(update_time, create_time,quiz_id)
        values (#{updateTime}, #{createTime},#{quizID})
    </insert>

    <update id="updateCollaborativeProcedure">
        update student_collaborative_task_system.procedure_collaborative
        <set>
            <if test="padID != null and padID != ''">
                pad_id=#{padID},
            </if>
            <if test="readOnlyID != null and readOnlyID != ''">
                readonly_id=#{readOnlyID},
            </if>
            <if test="updateTime != null">
                update_time=#{updateTime},
            </if>
            <if test="endTime != null">
                end_time=#{endTime}
            </if>
        </set>
        where id=#{ID}
    </update>

    <update id="updateTaskInfoOfGroup">
        update student_collaborative_task_system.task_info_of_group
        <set>
            go_next=0,
            <if test="procedureNow != null">
                procedure_now=#{procedureNow},
            </if>
            <if test="updateTime != null">
                update_time=#{updateTime},
            </if>
            <if test="endTime != null">
                end_time=#{endTime}
            </if>
        </set>
        where task_id=#{taskID} and group_id=#{groupID}
    </update>
    <delete id="deleteQuizItemScore">
        delete from student_collaborative_task_system.quiz_item_score
        where quiz_id = #{quizID} and student_id = #{studentID}
    </delete>

    <select id="getProcedureOrderList" resultType="java.lang.String">
        select procedure_order_list
        from student_collaborative_task_system.task
        where id = #{taskID}
    </select>

    <select id="getTaskPage" resultType="com.itheima.pojo.Task">
        select task.* from student_collaborative_task_system.task as task
        left join student_collaborative_task_system.class as class on task.class_id = class.id

        <where>

            <if test="classID!=null and classID!=''">task.class_id = #{classID}</if>

            <if test="teacherID!=null and teacherID!=''">and class.teacher_id =
                #{teacherID}
            </if>

            <if test="topic!=null and topic!=''">and task.topic like concat('%',#{topic},'%')</if>

            <if test="className!=null and className!=''">and task.class_id in (select id from class where class.name
                like concat('%',#{className},'%'))
            </if>

            <if test="status == 0">and task.start_time &gt; now()</if>
            <if test="status == 1">and task.start_time &lt;= now() and task.end_time &gt; now()</if>
            <if test="status == 2">and task.end_time &lt; now()</if>

            and task.is_delete=0
        </where>

        order by task.create_time desc

    </select>
    <select id="getCollabrotiveIdList" resultType="java.lang.Integer">
        select procedure_id from student_collaborative_task_system.procedure_category
        where task_id = #{taskId} and group_id = #{groupId} and procedure_type = 2
    </select>
    <select id="getCollabrotiveProcedureInfo" resultType="com.itheima.pojo.CollaborativeProcedure">
        select * from student_collaborative_task_system.procedure_collaborative where id = #{procedureID}
    </select>

</mapper>